{"version":3,"sources":["Components/Task.js","Components/TaskList.js","Components/Add.js","Components/Menu.js","App.js","index.js"],"names":["Task","handleTextChange","event","applyNewText","keyCode","input","onblur","document","removeEventListener","newText","value","oldText","span","textContent","closest","replaceChild","id","props","taskData","onTextChange","target","createElement","type","classList","add","spellcheck","focus","addEventListener","nextProps","nextState","isCompleted","this","text","textClassName","className","checked","onChange","onTaskToggle","onClick","onDeleteTask","React","Component","TaskList","taskList","tasks","category","completedTasks","filter","task","activeTasks","sort","task1","task2","concat","sortTasks","data","map","key","length","Add","submit","querySelector","activeElement","onAddTask","placeholder","spellCheck","autoFocus","onFocus","onBlur","Menu","handleCategoryChange","tagName","toLowerCase","querySelectorAll","forEach","button","remove","dataset","handleChangeCategory","handleSelectAll","handleUnselectAll","isAllSelected","tasksCount","data-value","handleClearCompleted","PureComponent","App","state","selectedCategory","addTask","Date","now","slice","push","setState","nextId","deleteTask","index","findIndex","splice","toggleTask","changeTaskText","clearCompleted","selectAll","unselectAll","checkIsAllSelected","changeCategory","storedTasks","JSON","parse","localStorage","getItem","setItem","stringify","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.0d0e6ec7.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nclass Task extends React.Component {\r\n  \r\n  handleTextChange = (event) => {\r\n    // use closures because it is the cleanest way to remove keypress event listener\r\n    const applyNewText = (event) => {\r\n      if (event.keyCode && event.keyCode !== 13) return;\r\n\r\n      input.onblur = null;\r\n      document.removeEventListener('keypress', applyNewText);\r\n\r\n      let newText = input.value;\r\n      if (newText === '') {\r\n        newText = oldText;\r\n      };\r\n      \r\n      span.textContent = newText;\r\n      input.closest('.task').replaceChild(span, input);\r\n      \r\n      const {id} = this.props.taskData;\r\n      this.props.onTextChange(id, newText);\r\n    }\r\n\r\n\r\n    const span = event.target;\r\n    const oldText = span.textContent;\r\n    \r\n    const input = document.createElement('input');\r\n    input.type = 'text';\r\n    input.classList.add('task__text');\r\n    input.value = oldText;\r\n    input.spellcheck = false;\r\n    span.closest('.task').replaceChild(input, span);\r\n    input.focus();\r\n    \r\n    \r\n    input.onblur = applyNewText;\r\n    document.addEventListener('keypress', applyNewText);\r\n  }\r\n  \r\n  \r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    return (\r\n      nextProps.taskData.isCompleted !== this.props.taskData.isCompleted\r\n      || nextProps.taskData.text !== this.props.taskData.text\r\n    )\r\n  }\r\n\r\n\r\n  render() {\r\n    const {id, text, isCompleted} = this.props.taskData;\r\n    const textClassName = (isCompleted ? ' task__text_completed' : '');\r\n    \r\n    return(\r\n      <div className=\"task\">\r\n        <label className=\"checkbox\">\r\n          <input\r\n            className=\"checkbox__input\"\r\n            type='checkbox'\r\n            checked={isCompleted}\r\n            onChange={() => this.props.onTaskToggle(id)}\r\n          />\r\n          <span className=\"checkbox__checkmark\">&#10004;</span>\r\n        </label>\r\n        \r\n        <div\r\n          className={\"task__text\" + textClassName}\r\n          onClick={this.handleTextChange}\r\n        >{text}</div>\r\n        \r\n        <button\r\n          className=\"task__destroy\"\r\n          onClick={() => this.props.onDeleteTask(id)}\r\n        ></button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nTask.propTypes = {\r\n  taskData: PropTypes.shape({\r\n    id: PropTypes.number.isRequired,\r\n    text: PropTypes.string.isRequired,\r\n    isCompleted: PropTypes.bool.isRequired,\r\n  }),\r\n  onTaskToggle: PropTypes.func.isRequired,\r\n  onTextChange: PropTypes.func.isRequired,\r\n  onDeleteTask: PropTypes.func.isRequired,\r\n}\r\n\r\nexport { Task }","import React from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport { Task } from './Task.js'\r\n\r\n\r\nfunction TaskList(props) {\r\n  \r\n  const renderTasks = () => {\r\n    const tasks = sortTasks(props.data, props.category);\r\n    let tasksListTemplate = [];\r\n    \r\n    tasksListTemplate = tasks.map((task) => {\r\n      return (\r\n        <Task\r\n          key={task.id}\r\n          taskData={task}\r\n          onTaskToggle={props.onTaskToggle}\r\n          onTextChange={props.onTextChange}\r\n          onDeleteTask={props.onDeleteTask}\r\n        />\r\n      )\r\n    })\r\n    \r\n    return tasksListTemplate;\r\n  }\r\n  \r\n  \r\n  const sortTasks = (tasks, category) => {\r\n    const completedTasks = tasks.filter((task) => task.isCompleted);\r\n    const activeTasks = tasks.filter((task) => !task.isCompleted);\r\n    \r\n    // sorting in order of creating (newest on the top of todo list)\r\n    completedTasks.sort( (task1, task2) => (task1.id > task2.id ? -1 : 1) )\r\n    activeTasks.sort( (task1, task2) => (task1.id > task2.id ? -1 : 1) )\r\n    \r\n    if (category === 'active'){\r\n      return activeTasks;\r\n    } else if (category === 'completed') {\r\n      return completedTasks;\r\n    } else {\r\n      return activeTasks.concat(completedTasks);\r\n    }\r\n  }\r\n  \r\n  \r\n  let taskList = renderTasks();\r\n  if (!taskList.length && props.category !== 'all') {\r\n     taskList = (\r\n        <div className=\"nothing-there\">Nothing there</div>\r\n     )\r\n  }\r\n  return (\r\n    <div>\r\n      {taskList}\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nTaskList.propTypes = {\r\n  data: PropTypes.array.isRequired,\r\n  category: PropTypes.string.isRequired,\r\n}\r\n\r\n\r\nexport { TaskList }","import React from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nfunction Add(props) {\r\n  \r\n  const addSubmitListener = () => {\r\n    document.addEventListener('keypress', submit)\r\n  }\r\n  const removeSubmitListener = () => {\r\n    document.removeEventListener('keypress', submit)\r\n  }\r\n  \r\n  \r\n  const submit = (event) => {\r\n    if (event.keyCode !== 13) return;\r\n    \r\n    const input = document.querySelector('.add__text');\r\n    if (document.activeElement !== input) return;\r\n    \r\n    const text = input.value;\r\n    if (text === '') return;\r\n    input.value = '';\r\n    \r\n    props.onAddTask(text);\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"add\">\r\n      <input\r\n        className=\"add__text\"\r\n        type='text'\r\n        placeholder=\"What needs to be done?\"\r\n        spellCheck=\"false\"\r\n        autoFocus={true}\r\n        onFocus={addSubmitListener}\r\n        onBlur={removeSubmitListener}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nAdd.propTypes = {\r\n  onAddTask: PropTypes.func.isRequired,\r\n}\r\n\r\nexport { Add }","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Menu extends React.PureComponent {\r\n  handleCategoryChange = (event) => {\r\n    const target = event.target;\r\n    if (target.tagName.toLowerCase() !== 'button') return;\r\n    \r\n    document.querySelectorAll('.menu__choose-category button')\r\n      .forEach(button => button.classList.remove('choosen'));\r\n    target.classList.add('choosen');\r\n    \r\n    const category = target.dataset.value;\r\n    this.props.handleChangeCategory(category);\r\n  }\r\n  \r\n  \r\n  handleSelectAll = (event) => {\r\n    const checked = event.target.checked;\r\n    if (checked) {\r\n      this.props.handleSelectAll();\r\n    } else {\r\n      this.props.handleUnselectAll();\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    return(\r\n      <div className='menu'>\r\n        <label className=\"checkbox\">\r\n          <input\r\n            className=\"checkbox__input\"\r\n            type='checkbox'\r\n            checked={this.props.isAllSelected}\r\n            onChange={this.handleSelectAll}\r\n          />\r\n          <span className=\"checkbox__checkmark\">&#10004;</span>\r\n          <span className=\"checkbox__select-all-label\">Select<br/>all ({this.props.tasksCount})</span>\r\n        </label>\r\n        \r\n        <nav className=\"menu__choose-category\" onClick={this.handleCategoryChange}>\r\n          <button className=\"menu__all-tasks choosen\" data-value=\"all\">All</button>\r\n          <button className=\"menu__active-tasks\" data-value=\"active\">Active</button>\r\n          <button className=\"menu__completed-tasks\" data-value=\"completed\">Completed</button>\r\n        </nav>\r\n        \r\n        <button\r\n          className=\"menu__clear-completed\"\r\n          onClick={this.props.handleClearCompleted}\r\n        >\r\n          Clear<br/>completed\r\n        </button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nMenu.propTypes = {\r\n  handleChangeCategory: PropTypes.func.isRequired,\r\n  handleClearCompleted: PropTypes.func.isRequired,\r\n  handleSelectAll: PropTypes.func.isRequired,\r\n  handleUnselectAll: PropTypes.func.isRequired,\r\n  isAllSelected: PropTypes.bool.isRequired,\r\n  tasksCount: PropTypes.number.isRequired\r\n}\r\n\r\nexport {Menu};","import React from 'react';\nimport './App.scss';\n\nimport { TaskList } from './Components/TaskList.js';\nimport { Add } from './Components/Add.js';\nimport { Menu } from './Components/Menu.js';\n\n\nclass App extends React.Component {\n  state = {\n    selectedCategory: 'all',\n    tasks: [],\n  }\n\n\n  componentDidMount() {\n     const storedTasks =JSON.parse(localStorage.getItem('tasks'));\n     if (!storedTasks) return;\n     this.setState( {tasks: storedTasks} );\n  }\n\n  componentDidUpdate() {\n     localStorage.setItem('tasks', JSON.stringify(this.state.tasks));\n  }\n\n\n  addTask = (text) => {\n    const id = Date.now();\n    const tasks = this.state.tasks.slice();\n    tasks.push({\n      id: id,\n      text: text,\n      isCompleted: false,\n    })\n    \n    this.setState({\n      nextId: id + 1,\n      tasks: tasks,\n    })\n  }\n  \n  \n  deleteTask = (id) => {\n    const tasks = this.state.tasks.slice();\n    const index = tasks.findIndex((task) => task.id === id);\n    \n    tasks.splice(index, 1);\n\n    const selectedCategory = tasks.length ? this.state.selectedCategory : 'all';\n    \n    this.setState({\n      tasks,\n      selectedCategory\n    })\n  }\n  \n  \n  toggleTask = (id) => {\n    const tasks = this.state.tasks.slice();\n    const index = tasks.findIndex((task) => task.id === id);\n    \n    tasks[index] = {\n      ...tasks[index],\n      isCompleted: !tasks[index].isCompleted,\n    };\n    \n    this.setState({\n      tasks: tasks,\n    })\n  }\n  \n  \n  changeTaskText = (id, text) => {\n    const tasks = this.state.tasks.slice();\n    const index = tasks.findIndex((task) => task.id === id);\n\n    tasks[index] = {\n      ...tasks[index],\n      text: text,\n    };\n    \n    this.setState({\n      tasks: tasks,\n    })\n  }\n  \n  \n  clearCompleted = () => {\n    let tasks = this.state.tasks.slice();\n    tasks = tasks.filter(task => !task.isCompleted)\n\n    const selectedCategory = tasks.length ? this.state.selectedCategory : 'all';\n\n    this.setState({\n      tasks,\n      selectedCategory\n    })\n  }\n  \n  \n  selectAll = () => {\n    let tasks = this.state.tasks.slice();\n    \n    tasks = tasks.map(task => {\n      return {\n        ...task,\n        isCompleted: true,\n      };\n    });\n    \n    this.setState({\n      tasks,\n    })\n  }\n  \n  \n  unselectAll = () => {\n    let tasks = this.state.tasks.slice();\n    \n    tasks = tasks.map(task => {\n      return {\n        ...task,\n        isCompleted: false,\n      };\n    });\n    \n    this.setState({\n      tasks,\n    })\n  }\n  \n\n  // needs for Menu to toggle 'select all' checkbox\n  checkIsAllSelected = () => {\n    if (this.state.tasks.length === 0){\n      return false;\n    }\n    \n    for (let task of this.state.tasks) {\n      if ( !task.isCompleted) {\n        return false;\n      }\n    }\n    \n    return true;\n  }\n\n\n  changeCategory = (category) => {\n    this.setState({\n      selectedCategory: category,\n    })\n  }\n  \n  \n  render() {\n    const isAllSelected = this.checkIsAllSelected();\n    const {tasks, selectedCategory} = this.state;\n    \n    return(      \n      <div className=\"todo\">\n        {tasks.length\n          ? <Menu\n            handleChangeCategory={this.changeCategory}\n            handleClearCompleted={this.clearCompleted}\n            handleSelectAll={this.selectAll}\n            handleUnselectAll={this.unselectAll}\n            isAllSelected={isAllSelected}\n            tasksCount={tasks.length}\n          />\n          : null\n        }\n        \n        <div className=\"todo__body\">\n          <Add onAddTask={this.addTask} />\n          \n          <TaskList\n            data={tasks}\n            category={selectedCategory}\n            onTaskToggle={this.toggleTask}\n            onTextChange={this.changeTaskText}\n            onDeleteTask={this.deleteTask}\n          />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}