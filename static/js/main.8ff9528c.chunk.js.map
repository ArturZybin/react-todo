{"version":3,"sources":["Components/Task.js","Components/TaskList.js","Components/Add.js","Components/Menu.js","App.js","serviceWorker.js","index.js"],"names":["Task","handleDoubleClick","event","applyNewText","keyCode","input","onblur","document","removeEventListener","newText","value","oldText","span","textContent","closest","replaceChild","id","props","taskData","onTextChange","target","createElement","type","classList","add","spellcheck","focus","addEventListener","nextProps","nextState","isCompleted","this","text","textClassName","className","checked","onChange","onTaskToggle","onDoubleClick","onClick","onDeleteTask","React","Component","TaskList","taskList","tasks","category","completedTasks","filter","task","activeTasks","sort","task1","task2","concat","sortTasks","data","map","key","length","Add","submit","querySelector","activeElement","onAddTask","placeholder","spellCheck","autoFocus","onFocus","onBlur","Menu","handleCategoryChange","tagName","toLowerCase","querySelectorAll","forEach","button","remove","dataset","onChangeCategory","handleSelectAll","onSelectAll","onUnselectAll","isAllSelected","data-value","onClearCompleted","PureComponent","App","state","selectedCategory","addTask","Date","now","slice","push","setState","nextId","deleteTask","index","findIndex","splice","toggleTask","changeTaskText","clearCompleted","selectAll","unselectAll","checkIsAllSelected","changeCategory","storedTasks","JSON","parse","localStorage","getItem","setItem","stringify","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8ff9528c.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nclass Task extends React.Component {\r\n  \r\n  handleDoubleClick = (event) => {\r\n    // use closures because it is the cleanest way to remove keypress event listener\r\n    const applyNewText = (event) => {\r\n      if (event.keyCode && event.keyCode !== 13) return;\r\n\r\n      input.onblur = null;\r\n      document.removeEventListener('keypress', applyNewText);\r\n\r\n      let newText = input.value;\r\n      if (newText === '') {\r\n        newText = oldText;\r\n      };\r\n      \r\n      span.textContent = newText;\r\n      input.closest('.task').replaceChild(span, input);\r\n      \r\n      const {id} = this.props.taskData;\r\n      this.props.onTextChange(id, newText);\r\n    }\r\n\r\n\r\n    const span = event.target;\r\n    const oldText = span.textContent;\r\n    \r\n    const input = document.createElement('input');\r\n    input.type = 'text';\r\n    input.classList.add('task__text');\r\n    input.value = oldText;\r\n    input.spellcheck = false;\r\n    span.closest('.task').replaceChild(input, span);\r\n    input.focus();\r\n    \r\n    \r\n    input.onblur = applyNewText;\r\n    document.addEventListener('keypress', applyNewText);\r\n  }\r\n  \r\n  \r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    return (\r\n      nextProps.taskData.isCompleted !== this.props.taskData.isCompleted\r\n      || nextProps.taskData.text !== this.props.taskData.text\r\n    )\r\n  }\r\n\r\n\r\n  render() {\r\n    const {id, text, isCompleted} = this.props.taskData;\r\n    const textClassName = (isCompleted ? ' task__text_completed' : '');\r\n    \r\n    return(\r\n      <div className=\"task\">\r\n        <label className=\"checkbox\">\r\n          <input\r\n            className=\"checkbox__input\"\r\n            type='checkbox'\r\n            checked={isCompleted}\r\n            onChange={() => this.props.onTaskToggle(id)}\r\n          />\r\n          <span className=\"checkbox__checkmark\">&#10004;</span>\r\n        </label>\r\n        \r\n        <div\r\n          className={\"task__text\" + textClassName}\r\n          onDoubleClick={this.handleDoubleClick}\r\n        >{text}</div>\r\n        \r\n        <button\r\n          className=\"task__destroy\"\r\n          onClick={() => this.props.onDeleteTask(id)}\r\n        ></button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nTask.propTypes = {\r\n  taskData: PropTypes.shape({\r\n    id: PropTypes.number.isRequired,\r\n    text: PropTypes.string.isRequired,\r\n    isCompleted: PropTypes.bool.isRequired,\r\n  }),\r\n  onTaskToggle: PropTypes.func.isRequired,\r\n  onTextChange: PropTypes.func.isRequired,\r\n  onDeleteTask: PropTypes.func.isRequired,\r\n}\r\n\r\nexport { Task }","import React from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport { Task } from './Task.js'\r\n\r\n\r\nfunction TaskList(props) {\r\n  \r\n  const renderTasks = () => {\r\n    const tasks = sortTasks(props.data, props.category);\r\n    let tasksListTemplate = [];\r\n    \r\n    tasksListTemplate = tasks.map((task) => {\r\n      return (\r\n        <Task\r\n          key={task.id}\r\n          taskData={task}\r\n          onTaskToggle={props.onTaskToggle}\r\n          onTextChange={props.onTextChange}\r\n          onDeleteTask={props.onDeleteTask}\r\n        />\r\n      )\r\n    })\r\n    \r\n    return tasksListTemplate;\r\n  }\r\n  \r\n  \r\n  const sortTasks = (tasks, category) => {\r\n    const completedTasks = tasks.filter((task) => task.isCompleted);\r\n    const activeTasks = tasks.filter((task) => !task.isCompleted);\r\n    \r\n    // sorting in order of creating (newest on the top of todo list)\r\n    completedTasks.sort( (task1, task2) => (task1.id > task2.id ? -1 : 1) )\r\n    activeTasks.sort( (task1, task2) => (task1.id > task2.id ? -1 : 1) )\r\n    \r\n    if (category === 'active'){\r\n      return activeTasks;\r\n    } else if (category === 'completed') {\r\n      return completedTasks;\r\n    } else {\r\n      return activeTasks.concat(completedTasks);\r\n    }\r\n  }\r\n  \r\n  \r\n  let taskList = renderTasks();\r\n  if (!taskList.length && props.category !== 'all') {\r\n     taskList = (\r\n        <div className=\"nothing-there\">Nothing there</div>\r\n     )\r\n  }\r\n  return (\r\n    <div>\r\n      {taskList}\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nTaskList.propTypes = {\r\n  data: PropTypes.array.isRequired,\r\n  category: PropTypes.string.isRequired,\r\n}\r\n\r\n\r\nexport { TaskList }","import React from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nfunction Add(props) {\r\n  \r\n  const addSubmitListener = () => {\r\n    document.addEventListener('keypress', submit)\r\n  }\r\n  const removeSubmitListener = () => {\r\n    document.removeEventListener('keypress', submit)\r\n  }\r\n  \r\n  \r\n  const submit = (event) => {\r\n    if (event.keyCode !== 13) return;\r\n    \r\n    const input = document.querySelector('.add__text');\r\n    if (document.activeElement !== input) return;\r\n    \r\n    const text = input.value;\r\n    if (text === '') return;\r\n    input.value = '';\r\n    \r\n    props.onAddTask(text);\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"add\">\r\n      <input\r\n        className=\"add__text\"\r\n        type='text'\r\n        placeholder=\"What needs to be done?\"\r\n        spellCheck=\"false\"\r\n        autoFocus={true}\r\n        onFocus={addSubmitListener}\r\n        onBlur={removeSubmitListener}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nAdd.propTypes = {\r\n  onAddTask: PropTypes.func.isRequired,\r\n}\r\n\r\nexport { Add }","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Menu extends React.PureComponent {\r\n  \r\n  handleCategoryChange = (event) => {\r\n    const target = event.target;\r\n    if (target.tagName.toLowerCase() !== 'button') return;\r\n    \r\n    document.querySelectorAll('.menu__choose-category button')\r\n      .forEach(button => button.classList.remove('choosen'));\r\n    target.classList.add('choosen');\r\n    \r\n    const category = target.dataset.value;\r\n    this.props.onChangeCategory(category);\r\n  }\r\n  \r\n  \r\n  handleSelectAll = (event) => {\r\n    const checked = event.target.checked;\r\n    if (checked) {\r\n      this.props.onSelectAll();\r\n    } else {\r\n      this.props.onUnselectAll();\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    return(\r\n      <div className='menu'>\r\n        <label className=\"checkbox\">\r\n          <input\r\n            className=\"checkbox__input\"\r\n            type='checkbox'\r\n            checked={this.props.isAllSelected}\r\n            onChange={this.handleSelectAll}\r\n          />\r\n          <span className=\"checkbox__checkmark\">&#10004;</span>\r\n          <span className=\"checkbox__select-all-label\">Select<br/>all</span>\r\n        </label>\r\n        \r\n        <nav className=\"menu__choose-category\" onClick={this.handleCategoryChange}>\r\n          <button className=\"menu__all-tasks choosen\" data-value=\"all\">All</button>\r\n          <button className=\"menu__active-tasks\" data-value=\"active\">Active</button>\r\n          <button className=\"menu__completed-tasks\" data-value=\"completed\">Completed</button>\r\n        </nav>\r\n        \r\n        <button\r\n          className=\"menu__clear-completed\"\r\n          onClick={this.props.onClearCompleted}\r\n        >\r\n          Clear<br/>completed\r\n        </button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nMenu.propTypes = {\r\n  onChangeCategory: PropTypes.func.isRequired,\r\n  onClearCompleted: PropTypes.func.isRequired,\r\n}\r\n\r\nexport {Menu};","import React from 'react';\nimport './App.scss';\n\nimport { TaskList } from './Components/TaskList.js';\nimport { Add } from './Components/Add.js';\nimport { Menu } from './Components/Menu.js';\n\n\nclass App extends React.Component {\n  state = {\n    selectedCategory: 'all',\n    tasks: [],\n  }\n\n\n  componentDidMount() {\n     const storedTasks =JSON.parse(localStorage.getItem('tasks'));\n     if (!storedTasks) return;\n     this.setState( {tasks: storedTasks} );\n  }\n\n  componentDidUpdate() {\n     localStorage.setItem('tasks', JSON.stringify(this.state.tasks));\n  }\n\n\n  addTask = (text) => {\n    const id = Date.now();\n    const tasks = this.state.tasks.slice();\n    tasks.push({\n      id: id,\n      text: text,\n      isCompleted: false,\n    })\n    \n    this.setState({\n      nextId: id + 1,\n      tasks: tasks,\n    })\n  }\n  \n  \n  deleteTask = (id) => {\n    const tasks = this.state.tasks.slice();\n    const index = tasks.findIndex((task) => task.id === id);\n    \n    tasks.splice(index, 1);\n\n    const selectedCategory = tasks.length ? this.state.selectedCategory : 'all';\n    \n    this.setState({\n      tasks,\n      selectedCategory\n    })\n  }\n  \n  \n  toggleTask = (id) => {\n    const tasks = this.state.tasks.slice();\n    const index = tasks.findIndex((task) => task.id === id);\n    \n    tasks[index] = {\n      ...tasks[index],\n      isCompleted: !tasks[index].isCompleted,\n    };\n    \n    this.setState({\n      tasks: tasks,\n    })\n  }\n  \n  \n  changeTaskText = (id, text) => {\n    const tasks = this.state.tasks.slice();\n    const index = tasks.findIndex((task) => task.id === id);\n\n    tasks[index] = {\n      ...tasks[index],\n      text: text,\n    };\n    \n    this.setState({\n      tasks: tasks,\n    })\n  }\n  \n  \n  clearCompleted = () => {\n    let tasks = this.state.tasks.slice();\n    tasks = tasks.filter(task => !task.isCompleted)\n\n    const selectedCategory = tasks.length ? this.state.selectedCategory : 'all';\n\n    this.setState({\n      tasks,\n      selectedCategory\n    })\n  }\n  \n  \n  selectAll = () => {\n    let tasks = this.state.tasks.slice();\n    \n    tasks = tasks.map(task => {\n      return {\n        ...task,\n        isCompleted: true,\n      };\n    });\n    \n    this.setState({\n      tasks,\n    })\n  }\n  \n  \n  unselectAll = () => {\n    let tasks = this.state.tasks.slice();\n    \n    tasks = tasks.map(task => {\n      return {\n        ...task,\n        isCompleted: false,\n      };\n    });\n    \n    this.setState({\n      tasks,\n    })\n  }\n  \n\n  // needs for Menu to toggle 'select all' checkbox\n  checkIsAllSelected = () => {\n    if (this.state.tasks.length === 0){\n      return false;\n    }\n    \n    for (let task of this.state.tasks) {\n      if ( !task.isCompleted) {\n        return false;\n      }\n    }\n    \n    return true;\n  }\n\n\n  changeCategory = (category) => {\n    this.setState({\n      selectedCategory: category,\n    })\n  }\n  \n  \n  render() {\n    const isAllSelected = this.checkIsAllSelected();\n    const {tasks, selectedCategory} = this.state;\n    \n    return(      \n      <div className=\"todo\">\n        {tasks.length\n          ? <Menu\n            onChangeCategory={this.changeCategory}\n            onClearCompleted={this.clearCompleted}\n            onSelectAll={this.selectAll}\n            onUnselectAll={this.unselectAll}\n            isAllSelected={isAllSelected}\n          />\n          : null\n        }\n        \n        <div className=\"todo__body\">\n          <Add onAddTask={this.addTask} />\n          \n          <TaskList\n            data={tasks}\n            category={selectedCategory}\n            onTaskToggle={this.toggleTask}\n            onTextChange={this.changeTaskText}\n            onDeleteTask={this.deleteTask}\n          />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}