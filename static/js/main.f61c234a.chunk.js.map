{"version":3,"sources":["jsComponents/Task.js","jsComponents/TaskList.js","jsComponents/Add.js","jsComponents/Menu.js","App.js","serviceWorker.js","index.js"],"names":["Task","handleDoubleClick","event","span","target","oldText","textContent","input","document","createElement","type","classList","add","value","closest","replaceChild","focus","onblur","newText","id","props","data","onTextChange","nextProps","nextState","done","this","text","textClassName","className","checked","onChange","onTaskToggle","onDoubleClick","onClick","onDeleteTask","React","Component","TaskList","renderTasks","sortTasks","category","map","item","key","tasks","completedTasks","filter","activeTasks","sort","item1","item2","reverse","concat","Add","addSubmitListener","addEventListener","submit","removeSubmitListener","removeEventListener","code","querySelector","onAddTask","placeholder","spellCheck","autoFocus","onFocus","onBlur","PureComponent","Menu","handleCategoryChange","tagName","toLowerCase","querySelectorAll","forEach","remove","dataset","onChangeCategory","handleSelectAll","onSelectAll","onUnselectAll","allSelected","data-value","onClearCompleted","App","toggleTask","newTasks","state","slice","index","findIndex","setState","changeTaskText","deleteTask","splice","addTask","nextId","push","changeCategory","choosenCategory","clearCompleted","selectAll","unselectAll","checkAllSelected","length","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f61c234a.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Task extends React.Component {\r\n  \r\n  handleDoubleClick = (event) => {\r\n    const span = event.target;\r\n    const oldText = span.textContent;\r\n    \r\n    const input = document.createElement('input');\r\n    input.type = 'text';\r\n    input.classList.add('task__text');\r\n    input.value = oldText;\r\n    span.closest('.task').replaceChild(input, span);\r\n    input.focus();\r\n    \r\n    \r\n    input.onblur = () => {\r\n      let newText = input.value;\r\n      if (newText === '') {\r\n        newText = oldText;\r\n      };\r\n      \r\n      span.textContent = newText;\r\n      input.closest('.task').replaceChild(span, input);\r\n      \r\n      const {id} = this.props.data;\r\n      this.props.onTextChange(id, newText);\r\n    }\r\n  }\r\n  \r\n  \r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    return (\r\n      nextProps.data.done !== this.props.data.done\r\n      || nextProps.data.text !== this.props.data.text\r\n    )\r\n  }\r\n\r\n\r\n  render() {\r\n    const {id, text, done} = this.props.data;\r\n    const textClassName = (done ? ' task__text_done' : '');\r\n    \r\n    return(\r\n      <div className=\"task\">\r\n        <label className=\"checkbox\">\r\n          <input\r\n            className=\"checkbox__input\"\r\n            type='checkbox'\r\n            checked={done}\r\n            onChange={() => this.props.onTaskToggle(id)}\r\n          />\r\n          <span className=\"checkbox__checkmark\">&#10004;</span>\r\n        </label>\r\n        \r\n        <div className={\"task__text\" + textClassName} onDoubleClick={this.handleDoubleClick}>{text}</div>\r\n        \r\n        <button\r\n          className=\"task__destroy\"\r\n          onClick={() => this.props.onDeleteTask(id)}\r\n        ></button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nTask.propTypes = {\r\n  data: PropTypes.shape({\r\n    id: PropTypes.number.isRequired,\r\n    text: PropTypes.string.isRequired,\r\n    done: PropTypes.bool.isRequired,\r\n  }),\r\n  onTaskToggle: PropTypes.func.isRequired,\r\n  onTextChange: PropTypes.func.isRequired,\r\n  onDeleteTask: PropTypes.func.isRequired,\r\n}\r\n\r\nexport { Task }","import React from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport { Task } from './Task.js'\r\n\r\n\r\nclass TaskList extends React.Component {\r\n  renderTasks = () => {\r\n    const tasks = this.sortTasks(this.props.data, this.props.category);\r\n    let tasksListTemplate = [];\r\n    \r\n    tasksListTemplate = tasks.map((item) => {\r\n      return (\r\n        <Task\r\n          key={item.id}\r\n          data={item}\r\n          onTaskToggle={this.props.onTaskToggle}\r\n          onTextChange={this.props.onTextChange}\r\n          onDeleteTask={this.props.onDeleteTask}\r\n        />\r\n      )\r\n    })\r\n    \r\n    return tasksListTemplate;\r\n  }\r\n  \r\n  \r\n  sortTasks = (tasks, category) => {\r\n    const completedTasks = tasks.filter((item) => item.done);\r\n    const activeTasks = tasks.filter((item) => !item.done);\r\n    \r\n    completedTasks.sort( (item1, item2) => (item1.id > item2.id ? 1 : -1) )\r\n    activeTasks.sort( (item1, item2) => (item1.id > item2.id ? 1 : -1) )\r\n    \r\n    completedTasks.reverse();\r\n    activeTasks.reverse();\r\n    \r\n    if (category === 'active'){\r\n      return activeTasks;\r\n    } else if (category === 'completed') {\r\n      return completedTasks;\r\n    } else {\r\n      return activeTasks.concat(completedTasks);\r\n    }\r\n  }\r\n  \r\n  \r\n  render() {\r\n    return(\r\n      <div className=\"todo__tasklist\">\r\n        {this.renderTasks()}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nTaskList.propTypes = {\r\n  data: PropTypes.array.isRequired,\r\n  category: PropTypes.string.isRequired,\r\n}\r\n\r\nexport { TaskList }","import React from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\nclass Add extends React.PureComponent {\r\n  addSubmitListener = () => {\r\n    document.addEventListener('keypress', this.submit)\r\n  }\r\n  removeSubmitListener = () => {\r\n    document.removeEventListener('keypress', this.submit)\r\n  }\r\n  \r\n  \r\n  submit = (event) => {\r\n    if (event.code !== 'Enter') return;\r\n    \r\n    const input = document.querySelector('.add__text');\r\n    const text = input.value;\r\n    if (text === '') return;\r\n    input.value = '';\r\n    \r\n    this.props.onAddTask(text);\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"add\">\r\n        <input\r\n          className=\"add__text\"\r\n          type='text'\r\n          placeholder=\"What needs to be done?\"\r\n          spellCheck=\"false\"\r\n          autoFocus={true}\r\n          onFocus={this.addSubmitListener}\r\n          onBlur={this.removeSubmitListener}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nAdd.propTypes = {\r\n  onAddTask: PropTypes.func.isRequired,\r\n}\r\n\r\nexport { Add }","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Menu extends React.PureComponent {\r\n  \r\n  handleCategoryChange = (event) => {\r\n    const target = event.target;\r\n    if (target.tagName.toLowerCase() !== 'button') return;\r\n    \r\n    document.querySelectorAll('.menu__choose-category button').forEach(item => item.classList.remove('choosen'));\r\n    target.classList.add('choosen');\r\n    \r\n    const category = target.dataset.value;\r\n    this.props.onChangeCategory(category);\r\n  }\r\n  \r\n  \r\n  handleSelectAll = (event) => {\r\n    const checked = event.target.checked;\r\n    if (checked) {\r\n      this.props.onSelectAll();\r\n    } else {\r\n      this.props.onUnselectAll();\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    return(\r\n      <div className='menu'>\r\n        <label className=\"checkbox\">\r\n          <input\r\n            className=\"checkbox__input\"\r\n            type='checkbox'\r\n            checked={this.props.allSelected}\r\n            onChange={this.handleSelectAll}\r\n          />\r\n          <span className=\"checkbox__checkmark\">&#10004;</span>\r\n          <span className=\"checkbox__select-all-label\">Select<br/>all</span>\r\n        </label>\r\n        \r\n        <nav className=\"menu__choose-category\" onClick={this.handleCategoryChange}>\r\n          <button className=\"menu__all-tasks choosen\" data-value=\"all\">All</button>\r\n          <button className=\"menu__active-tasks\" data-value=\"active\">Active</button>\r\n          <button className=\"menu__completed-tasks\" data-value=\"completed\">Completed</button>\r\n        </nav>\r\n        \r\n        <button\r\n          className=\"menu__clear-completed\"\r\n          onClick={this.props.onClearCompleted}\r\n        >\r\n          Clear<br/>completed\r\n        </button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nMenu.propTypes = {\r\n  onChangeCategory: PropTypes.func.isRequired,\r\n  onClearCompleted: PropTypes.func.isRequired,\r\n}\r\n\r\nexport {Menu};","import React from 'react';\nimport './App.scss';\n\nimport { TaskList } from './jsComponents/TaskList.js';\nimport { Add } from './jsComponents/Add.js';\nimport { Menu } from './jsComponents/Menu.js';\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      nextId: 0,\n      choosenCategory: 'all',\n      tasks: [],\n    }\n  }\n  \n  \n  toggleTask = (id) => {\n    const newTasks = this.state.tasks.slice();\n    const index = newTasks.findIndex((item) => item.id === id);\n    \n    newTasks[index] = {\n      ...newTasks[index],\n      done: !newTasks[index].done,\n    };\n    \n    this.setState({\n      tasks: newTasks,\n    })\n  }\n  \n  \n  changeTaskText = (id, text) => {\n    const newTasks = this.state.tasks.slice();\n    const index = newTasks.findIndex((item) => item.id === id);\n\n    newTasks[index] = {\n      ...newTasks[index],\n      text: text,\n    };\n    \n    this.setState({\n      tasks: newTasks,\n    })\n  }\n  \n  \n  deleteTask = (id) => {\n    const newTasks = this.state.tasks.slice();\n    const index = newTasks.findIndex((item) => item.id === id);\n    \n    newTasks.splice(index, 1);\n    \n    this.setState({\n      tasks: newTasks,\n    })\n  }\n  \n  \n  addTask = (text) => {\n    const id = this.state.nextId;\n    const newTasks = this.state.tasks.slice();\n    newTasks.push({\n      id: id,\n      text: text,\n      done: false,\n    })\n    \n    this.setState({\n      nextId: id + 1,\n      tasks: newTasks,\n    })\n  }\n  \n  \n  changeCategory = (category) => {\n    this.setState({\n      choosenCategory: category,\n    })\n  }\n  \n  \n  clearCompleted = () => {\n    let newTasks = this.state.tasks.slice();\n    newTasks = newTasks.filter(item => !item.done)\n    this.setState({\n      tasks: newTasks,\n    })\n  }\n  \n  \n  selectAll = () => {\n    let newTasks = this.state.tasks.slice();\n    \n    newTasks = newTasks.map(item => {\n      return {\n        ...item,\n        done: true,\n      };\n    });\n    \n    this.setState({\n      tasks: newTasks,\n    })\n  }\n  \n  \n  unselectAll = () => {\n    let newTasks = this.state.tasks.slice();\n    \n    newTasks = newTasks.map(item => {\n      return {\n        ...item,\n        done: false,\n      };\n    });\n    \n    this.setState({\n      tasks: newTasks,\n    })\n  }\n  \n  \n  checkAllSelected = () => {\n    if (this.state.tasks.length === 0){\n      return false;\n    }\n    \n    for (let item of this.state.tasks) {\n      if ( !item.done) {\n        return false;\n      }\n    }\n    \n    return true;\n  }\n  \n  \n  \n  render() {\n    const allSelected = this.checkAllSelected();\n    const {tasks, choosenCategory} = this.state;\n    \n    return(      \n      <div className=\"todo\">\n        {tasks.length\n          ? <Menu\n            onChangeCategory={this.changeCategory}\n            onClearCompleted={this.clearCompleted}\n            onSelectAll={this.selectAll}\n            onUnselectAll={this.unselectAll}\n            allSelected={allSelected}\n          />\n          : null\n        }\n        \n        <div className=\"todo__body\">\n          <Add onAddTask={this.addTask} />\n          \n          <TaskList\n            data={tasks}\n            category={choosenCategory}\n            onTaskToggle={this.toggleTask}\n            onTextChange={this.changeTaskText}\n            onDeleteTask={this.deleteTask}\n          />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}